// source: google/firestore/v1/common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
goog.exportSymbol('proto.google.firestore.v1.DocumentMask', null, global);
goog.exportSymbol('proto.google.firestore.v1.Precondition', null, global);
goog.exportSymbol('proto.google.firestore.v1.Precondition.ConditionTypeCase', null, global);
goog.exportSymbol('proto.google.firestore.v1.TransactionOptions', null, global);
goog.exportSymbol('proto.google.firestore.v1.TransactionOptions.ModeCase', null, global);
goog.exportSymbol('proto.google.firestore.v1.TransactionOptions.ReadOnly', null, global);
goog.exportSymbol('proto.google.firestore.v1.TransactionOptions.ReadOnly.ConsistencySelectorCase', null, global);
goog.exportSymbol('proto.google.firestore.v1.TransactionOptions.ReadWrite', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.firestore.v1.DocumentMask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.google.firestore.v1.DocumentMask.repeatedFields_, null);
};
goog.inherits(proto.google.firestore.v1.DocumentMask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.firestore.v1.DocumentMask.displayName = 'proto.google.firestore.v1.DocumentMask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.firestore.v1.Precondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.google.firestore.v1.Precondition.oneofGroups_);
};
goog.inherits(proto.google.firestore.v1.Precondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.firestore.v1.Precondition.displayName = 'proto.google.firestore.v1.Precondition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.firestore.v1.TransactionOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.google.firestore.v1.TransactionOptions.oneofGroups_);
};
goog.inherits(proto.google.firestore.v1.TransactionOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.firestore.v1.TransactionOptions.displayName = 'proto.google.firestore.v1.TransactionOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.firestore.v1.TransactionOptions.ReadWrite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.firestore.v1.TransactionOptions.ReadWrite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.firestore.v1.TransactionOptions.ReadWrite.displayName = 'proto.google.firestore.v1.TransactionOptions.ReadWrite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.firestore.v1.TransactionOptions.ReadOnly = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.google.firestore.v1.TransactionOptions.ReadOnly.oneofGroups_);
};
goog.inherits(proto.google.firestore.v1.TransactionOptions.ReadOnly, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.firestore.v1.TransactionOptions.ReadOnly.displayName = 'proto.google.firestore.v1.TransactionOptions.ReadOnly';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.google.firestore.v1.DocumentMask.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.firestore.v1.DocumentMask.prototype.toObject = function(opt_includeInstance) {
  return proto.google.firestore.v1.DocumentMask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.firestore.v1.DocumentMask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firestore.v1.DocumentMask.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldPathsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.firestore.v1.DocumentMask}
 */
proto.google.firestore.v1.DocumentMask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.firestore.v1.DocumentMask;
  return proto.google.firestore.v1.DocumentMask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.firestore.v1.DocumentMask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.firestore.v1.DocumentMask}
 */
proto.google.firestore.v1.DocumentMask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldPaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.firestore.v1.DocumentMask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.firestore.v1.DocumentMask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.firestore.v1.DocumentMask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firestore.v1.DocumentMask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldPathsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string field_paths = 1;
 * @return {!Array<string>}
 */
proto.google.firestore.v1.DocumentMask.prototype.getFieldPathsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.google.firestore.v1.DocumentMask} returns this
 */
proto.google.firestore.v1.DocumentMask.prototype.setFieldPathsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.google.firestore.v1.DocumentMask} returns this
 */
proto.google.firestore.v1.DocumentMask.prototype.addFieldPaths = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.google.firestore.v1.DocumentMask} returns this
 */
proto.google.firestore.v1.DocumentMask.prototype.clearFieldPathsList = function() {
  return this.setFieldPathsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.google.firestore.v1.Precondition.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.google.firestore.v1.Precondition.ConditionTypeCase = {
  CONDITION_TYPE_NOT_SET: 0,
  EXISTS: 1,
  UPDATE_TIME: 2
};

/**
 * @return {proto.google.firestore.v1.Precondition.ConditionTypeCase}
 */
proto.google.firestore.v1.Precondition.prototype.getConditionTypeCase = function() {
  return /** @type {proto.google.firestore.v1.Precondition.ConditionTypeCase} */(jspb.Message.computeOneofCase(this, proto.google.firestore.v1.Precondition.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.firestore.v1.Precondition.prototype.toObject = function(opt_includeInstance) {
  return proto.google.firestore.v1.Precondition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.firestore.v1.Precondition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firestore.v1.Precondition.toObject = function(includeInstance, msg) {
  var f, obj = {
    exists: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    updateTime: (f = msg.getUpdateTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.firestore.v1.Precondition}
 */
proto.google.firestore.v1.Precondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.firestore.v1.Precondition;
  return proto.google.firestore.v1.Precondition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.firestore.v1.Precondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.firestore.v1.Precondition}
 */
proto.google.firestore.v1.Precondition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExists(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdateTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.firestore.v1.Precondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.firestore.v1.Precondition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.firestore.v1.Precondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firestore.v1.Precondition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getUpdateTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool exists = 1;
 * @return {boolean}
 */
proto.google.firestore.v1.Precondition.prototype.getExists = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.google.firestore.v1.Precondition} returns this
 */
proto.google.firestore.v1.Precondition.prototype.setExists = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.google.firestore.v1.Precondition.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.google.firestore.v1.Precondition} returns this
 */
proto.google.firestore.v1.Precondition.prototype.clearExists = function() {
  return jspb.Message.setOneofField(this, 1, proto.google.firestore.v1.Precondition.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.firestore.v1.Precondition.prototype.hasExists = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp update_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.google.firestore.v1.Precondition.prototype.getUpdateTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.google.firestore.v1.Precondition} returns this
*/
proto.google.firestore.v1.Precondition.prototype.setUpdateTime = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.google.firestore.v1.Precondition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.google.firestore.v1.Precondition} returns this
 */
proto.google.firestore.v1.Precondition.prototype.clearUpdateTime = function() {
  return this.setUpdateTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.firestore.v1.Precondition.prototype.hasUpdateTime = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.google.firestore.v1.TransactionOptions.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.google.firestore.v1.TransactionOptions.ModeCase = {
  MODE_NOT_SET: 0,
  READ_ONLY: 2,
  READ_WRITE: 3
};

/**
 * @return {proto.google.firestore.v1.TransactionOptions.ModeCase}
 */
proto.google.firestore.v1.TransactionOptions.prototype.getModeCase = function() {
  return /** @type {proto.google.firestore.v1.TransactionOptions.ModeCase} */(jspb.Message.computeOneofCase(this, proto.google.firestore.v1.TransactionOptions.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.firestore.v1.TransactionOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.google.firestore.v1.TransactionOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.firestore.v1.TransactionOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firestore.v1.TransactionOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    readOnly: (f = msg.getReadOnly()) && proto.google.firestore.v1.TransactionOptions.ReadOnly.toObject(includeInstance, f),
    readWrite: (f = msg.getReadWrite()) && proto.google.firestore.v1.TransactionOptions.ReadWrite.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.firestore.v1.TransactionOptions}
 */
proto.google.firestore.v1.TransactionOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.firestore.v1.TransactionOptions;
  return proto.google.firestore.v1.TransactionOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.firestore.v1.TransactionOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.firestore.v1.TransactionOptions}
 */
proto.google.firestore.v1.TransactionOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.google.firestore.v1.TransactionOptions.ReadOnly;
      reader.readMessage(value,proto.google.firestore.v1.TransactionOptions.ReadOnly.deserializeBinaryFromReader);
      msg.setReadOnly(value);
      break;
    case 3:
      var value = new proto.google.firestore.v1.TransactionOptions.ReadWrite;
      reader.readMessage(value,proto.google.firestore.v1.TransactionOptions.ReadWrite.deserializeBinaryFromReader);
      msg.setReadWrite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.firestore.v1.TransactionOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.firestore.v1.TransactionOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.firestore.v1.TransactionOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firestore.v1.TransactionOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReadOnly();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.google.firestore.v1.TransactionOptions.ReadOnly.serializeBinaryToWriter
    );
  }
  f = message.getReadWrite();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.google.firestore.v1.TransactionOptions.ReadWrite.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.firestore.v1.TransactionOptions.ReadWrite.prototype.toObject = function(opt_includeInstance) {
  return proto.google.firestore.v1.TransactionOptions.ReadWrite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.firestore.v1.TransactionOptions.ReadWrite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firestore.v1.TransactionOptions.ReadWrite.toObject = function(includeInstance, msg) {
  var f, obj = {
    retryTransaction: msg.getRetryTransaction_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.firestore.v1.TransactionOptions.ReadWrite}
 */
proto.google.firestore.v1.TransactionOptions.ReadWrite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.firestore.v1.TransactionOptions.ReadWrite;
  return proto.google.firestore.v1.TransactionOptions.ReadWrite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.firestore.v1.TransactionOptions.ReadWrite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.firestore.v1.TransactionOptions.ReadWrite}
 */
proto.google.firestore.v1.TransactionOptions.ReadWrite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRetryTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.firestore.v1.TransactionOptions.ReadWrite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.firestore.v1.TransactionOptions.ReadWrite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.firestore.v1.TransactionOptions.ReadWrite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firestore.v1.TransactionOptions.ReadWrite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRetryTransaction_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes retry_transaction = 1;
 * @return {!(string|Uint8Array)}
 */
proto.google.firestore.v1.TransactionOptions.ReadWrite.prototype.getRetryTransaction = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes retry_transaction = 1;
 * This is a type-conversion wrapper around `getRetryTransaction()`
 * @return {string}
 */
proto.google.firestore.v1.TransactionOptions.ReadWrite.prototype.getRetryTransaction_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRetryTransaction()));
};


/**
 * optional bytes retry_transaction = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRetryTransaction()`
 * @return {!Uint8Array}
 */
proto.google.firestore.v1.TransactionOptions.ReadWrite.prototype.getRetryTransaction_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRetryTransaction()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.google.firestore.v1.TransactionOptions.ReadWrite} returns this
 */
proto.google.firestore.v1.TransactionOptions.ReadWrite.prototype.setRetryTransaction = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.google.firestore.v1.TransactionOptions.ReadOnly.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.google.firestore.v1.TransactionOptions.ReadOnly.ConsistencySelectorCase = {
  CONSISTENCY_SELECTOR_NOT_SET: 0,
  READ_TIME: 2
};

/**
 * @return {proto.google.firestore.v1.TransactionOptions.ReadOnly.ConsistencySelectorCase}
 */
proto.google.firestore.v1.TransactionOptions.ReadOnly.prototype.getConsistencySelectorCase = function() {
  return /** @type {proto.google.firestore.v1.TransactionOptions.ReadOnly.ConsistencySelectorCase} */(jspb.Message.computeOneofCase(this, proto.google.firestore.v1.TransactionOptions.ReadOnly.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.firestore.v1.TransactionOptions.ReadOnly.prototype.toObject = function(opt_includeInstance) {
  return proto.google.firestore.v1.TransactionOptions.ReadOnly.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.firestore.v1.TransactionOptions.ReadOnly} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firestore.v1.TransactionOptions.ReadOnly.toObject = function(includeInstance, msg) {
  var f, obj = {
    readTime: (f = msg.getReadTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.firestore.v1.TransactionOptions.ReadOnly}
 */
proto.google.firestore.v1.TransactionOptions.ReadOnly.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.firestore.v1.TransactionOptions.ReadOnly;
  return proto.google.firestore.v1.TransactionOptions.ReadOnly.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.firestore.v1.TransactionOptions.ReadOnly} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.firestore.v1.TransactionOptions.ReadOnly}
 */
proto.google.firestore.v1.TransactionOptions.ReadOnly.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setReadTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.firestore.v1.TransactionOptions.ReadOnly.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.firestore.v1.TransactionOptions.ReadOnly.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.firestore.v1.TransactionOptions.ReadOnly} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firestore.v1.TransactionOptions.ReadOnly.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReadTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp read_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.google.firestore.v1.TransactionOptions.ReadOnly.prototype.getReadTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.google.firestore.v1.TransactionOptions.ReadOnly} returns this
*/
proto.google.firestore.v1.TransactionOptions.ReadOnly.prototype.setReadTime = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.google.firestore.v1.TransactionOptions.ReadOnly.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.google.firestore.v1.TransactionOptions.ReadOnly} returns this
 */
proto.google.firestore.v1.TransactionOptions.ReadOnly.prototype.clearReadTime = function() {
  return this.setReadTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.firestore.v1.TransactionOptions.ReadOnly.prototype.hasReadTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ReadOnly read_only = 2;
 * @return {?proto.google.firestore.v1.TransactionOptions.ReadOnly}
 */
proto.google.firestore.v1.TransactionOptions.prototype.getReadOnly = function() {
  return /** @type{?proto.google.firestore.v1.TransactionOptions.ReadOnly} */ (
    jspb.Message.getWrapperField(this, proto.google.firestore.v1.TransactionOptions.ReadOnly, 2));
};


/**
 * @param {?proto.google.firestore.v1.TransactionOptions.ReadOnly|undefined} value
 * @return {!proto.google.firestore.v1.TransactionOptions} returns this
*/
proto.google.firestore.v1.TransactionOptions.prototype.setReadOnly = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.google.firestore.v1.TransactionOptions.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.google.firestore.v1.TransactionOptions} returns this
 */
proto.google.firestore.v1.TransactionOptions.prototype.clearReadOnly = function() {
  return this.setReadOnly(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.firestore.v1.TransactionOptions.prototype.hasReadOnly = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ReadWrite read_write = 3;
 * @return {?proto.google.firestore.v1.TransactionOptions.ReadWrite}
 */
proto.google.firestore.v1.TransactionOptions.prototype.getReadWrite = function() {
  return /** @type{?proto.google.firestore.v1.TransactionOptions.ReadWrite} */ (
    jspb.Message.getWrapperField(this, proto.google.firestore.v1.TransactionOptions.ReadWrite, 3));
};


/**
 * @param {?proto.google.firestore.v1.TransactionOptions.ReadWrite|undefined} value
 * @return {!proto.google.firestore.v1.TransactionOptions} returns this
*/
proto.google.firestore.v1.TransactionOptions.prototype.setReadWrite = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.google.firestore.v1.TransactionOptions.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.google.firestore.v1.TransactionOptions} returns this
 */
proto.google.firestore.v1.TransactionOptions.prototype.clearReadWrite = function() {
  return this.setReadWrite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.firestore.v1.TransactionOptions.prototype.hasReadWrite = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.google.firestore.v1);
